// Generated by CoffeeScript 1.10.0

/*
Author: Jens G. Magnus
 */

(function() {
  var bindMouseEvents, cameraMouseCapture, canvas, current_pitch, current_roll, current_yaw, drawFunction, getCanvasSizeAndRelativeMouseLocation, onMouseDown, onMouseMove, onMouseUp, sensitivity, setDrawCallback, smoothingThreshold, springiness, target_pitch, target_roll, target_yaw, updateCamera, updateCameraInterval;

  canvas = null;

  drawFunction = null;

  cameraMouseCapture = false;

  springiness = 100;

  sensitivity = 0.1;

  smoothingThreshold = 0.0001;

  current_pitch = 0.0;

  current_yaw = 0.0;

  current_roll = 0.0;

  target_pitch = 0.0;

  target_yaw = 0.0;

  target_roll = 0.0;

  updateCameraInterval = null;

  bindMouseEvents = function(element) {
    canvas = element;
    canvas.onmousedown = onMouseDown;
    canvas.onmouseup = onMouseUp;
    return canvas.onmousemove = onMouseMove;
  };

  setDrawCallback = function(cb) {
    return drawFunction = cb;
  };

  getCanvasSizeAndRelativeMouseLocation = function(ev) {
    var bottom, height, left, rect, right, top, width, x, y;
    rect = canvas.getBoundingClientRect();
    left = rect.left + window.pageXOffset;
    right = rect.right + window.pageXOffset;
    top = rect.top + window.pageYOffset;
    bottom = rect.bottom + window.pageYOffset;
    width = right - left;
    height = bottom - top;
    x = ev.clientX - left;
    y = ev.clientY - top;
    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  };

  onMouseUp = function(ev) {
    return cameraMouseCapture = false;
  };

  onMouseDown = function(ev) {
    return cameraMouseCapture = true;
  };

  onMouseMove = function(ev) {
    var M, x, y;
    if (cameraMouseCapture !== true) {
      return;
    }
    M = getCanvasSizeAndRelativeMouseLocation(ev);
    x = 2.0 * M.x / M.width - 1.0;
    y = 2.0 * M.y / M.height - 1.0;
    target_yaw += x * sensitivity;
    target_pitch += y * sensitivity;
    if (!updateCameraInterval) {
      return updateCameraInterval = setInterval(updateCamera, 15);
    }
  };

  updateCamera = function(deltaTime) {
    var done, step;
    deltaTime = 0.015;
    step = 1 - Math.exp(Math.log(0.5) * springiness * deltaTime);
    current_pitch += (target_pitch - current_pitch) * step;
    current_yaw += (target_yaw - current_yaw) * step;
    current_roll += (target_roll - current_roll) * step;
    console.log("Rotation:", current_pitch, ", ", current_yaw, ", ", current_roll);
    done = true;
    done &= Math.abs(target_pitch - current_pitch) < smoothingThreshold;
    done &= Math.abs(target_yaw - current_yaw) < smoothingThreshold;
    done &= Math.abs(target_roll - current_roll) < smoothingThreshold;
    if (done && updateCameraInterval) {
      clearInterval(updateCameraInterval);
      updateCameraInterval = null;
    }
    if (drawFunction) {
      drawFunction();
    }
    return done;
  };

  window.glCamera = {
    bindMouseEvents: bindMouseEvents,
    setDrawCallback: setDrawCallback
  };

}).call(this);

//# sourceMappingURL=gl-camera.js.map
